// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	entity "crud/entity"

	mock "github.com/stretchr/testify/mock"
)

// AccountInterfaceRepo is an autogenerated mock type for the AccountInterfaceRepo type
type AccountInterfaceRepo struct {
	mock.Mock
}

// ActivateAccount provides a mock function with given fields: account
func (_m *AccountInterfaceRepo) ActivateAccount(account *entity.Account) (interface{}, error) {
	ret := _m.Called(account)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Account) (interface{}, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(*entity.Account) interface{}); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: account
func (_m *AccountInterfaceRepo) CreateAccount(account *entity.Account) (*entity.Account, error) {
	ret := _m.Called(account)

	var r0 *entity.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Account) (*entity.Account, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(*entity.Account) *entity.Account); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccount provides a mock function with given fields: username
func (_m *AccountInterfaceRepo) DeleteAccount(username string) (interface{}, error) {
	ret := _m.Called(username)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsById provides a mock function with given fields: id
func (_m *AccountInterfaceRepo) GetAccountsById(id uint) (entity.Account, error) {
	ret := _m.Called(id)

	var r0 entity.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.Account); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Account)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsByUsername provides a mock function with given fields: username
func (_m *AccountInterfaceRepo) GetAccountsByUsername(username string) (entity.Account, error) {
	ret := _m.Called(username)

	var r0 entity.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.Account, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) entity.Account); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(entity.Account)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: account
func (_m *AccountInterfaceRepo) UpdateAccount(account *entity.Account) (interface{}, error) {
	ret := _m.Called(account)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Account) (interface{}, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(*entity.Account) interface{}); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyAccount provides a mock function with given fields: account
func (_m *AccountInterfaceRepo) VerifyAccount(account *entity.Account) (interface{}, error) {
	ret := _m.Called(account)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Account) (interface{}, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(*entity.Account) interface{}); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAccountInterfaceRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountInterfaceRepo creates a new instance of AccountInterfaceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountInterfaceRepo(t mockConstructorTestingTNewAccountInterfaceRepo) *AccountInterfaceRepo {
	mock := &AccountInterfaceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
