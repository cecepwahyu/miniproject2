// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	entity "crud/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserInterfaceRepo is an autogenerated mock type for the UserInterfaceRepo type
type UserInterfaceRepo struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UserInterfaceRepo) CreateUser(user *entity.User) (*entity.User, error) {
	ret := _m.Called(user)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.User) (*entity.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*entity.User) *entity.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: email
func (_m *UserInterfaceRepo) DeleteUser(email string) (interface{}, error) {
	ret := _m.Called(email)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersById provides a mock function with given fields: id
func (_m *UserInterfaceRepo) GetUsersById(id uint) (entity.User, error) {
	ret := _m.Called(id)

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user
func (_m *UserInterfaceRepo) UpdateUser(user *entity.User) (interface{}, error) {
	ret := _m.Called(user)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.User) (interface{}, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*entity.User) interface{}); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserInterfaceRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserInterfaceRepo creates a new instance of UserInterfaceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserInterfaceRepo(t mockConstructorTestingTNewUserInterfaceRepo) *UserInterfaceRepo {
	mock := &UserInterfaceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
